@page "/"
@inject BlazoradeMsalService MsalService;
@inject BlazoradeRequestFactory RequestFactory;
@inject HttpClient HttpClient;

@code {

    public class GraphQueryModel
    {
        public string BaseAddress { get; set; } = "https://graph.microsoft.com/v1.0";
        public string RequestUri { get; set; } = "/me";
        public string Scopes { get; set; } = "User.Read";
        public bool QueryInProgress { get; set; }
    }

    private GraphQueryModel Model = new GraphQueryModel();

    private string? ResponseContent;
    private int? ResponseStatus;
    private Exception? ResponseException;
    private string? UserName;
    private string? AccessToken;
    private string? IdToken;

    private async Task SendRequestAsync()
    {
        this.ResponseContent = null;
        this.ResponseException = null;
        this.Model.QueryInProgress = true;
        this.StateHasChanged();

        try
        {
            var scopesArr = this.Model.Scopes.Split(",", options: StringSplitOptions.RemoveEmptyEntries);
            using(var request = await this.RequestFactory.CreateGetRequestAsync($"{this.Model.BaseAddress}{this.Model.RequestUri}", scopesArr))
            {
                using(var response = await this.HttpClient.SendAsync(request))
                {
                    this.ResponseStatus = (int)response.StatusCode;
                    this.ResponseContent = await response.Content.ReadAsStringAsync();
                }
            }
        }
        catch(Exception ex)
        {
            this.ResponseStatus = 500;
            this.ResponseException = ex;
        }
        finally
        {
            this.Model.QueryInProgress = false;
            this.StateHasChanged();
        }

        await this.HandleLoggedInUserAsync();
    }

    private Dictionary<string, object> GetButtonAttributes()
    {
        var attribs = new Dictionary<string, object>();
        if (this.Model.QueryInProgress)
        {
            attribs.Add("disabled", "disabled");
        }
        return attribs;
    }

    private async Task HandleLoggedInUserAsync()
    {
        try
        {
            var token = await this.MsalService.AcquireTokenSilentAsync(fallbackToDefaultLoginHint: true);
            this.UserName = token?.Account?.UserName;
            this.AccessToken = token?.AccessToken;
            this.IdToken = token?.IdToken;

            if(token?.Scopes?.Count > 0)
            {
                this.Model.Scopes = string.Join(",", token.Scopes);
            }
            this.StateHasChanged();
        }
        catch { }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await this.HandleLoggedInUserAsync();
        }
    }

}

<PageTitle>Microsoft Graph Access Sample</PageTitle>


@if(this.UserName?.Length > 0)
{
    <ul class="nav justify-content-end bg-primary mb-3">
        <li class="nav-item">
            <span class="nav-link text-white">Logged in as: @this.UserName</span>
        </li>
        <li class="nav-item">
            <button class="nav-link btn btn-primary text-white" @onclick="async (e) => { await this.MsalService.LogoutAsync(); }">Log Out</button>
        </li>
    </ul>
}

<h1>Microsoft Graph Request Builder</h1>

<EditForm Model=this.Model>
    <div class="input-group mb-3">
        <span class="input-group-text">Scopes</span>
        <InputText id="scopes" class="form-control" @bind-Value=this.Model.Scopes titlt="Comma-separated list of scopes that are required to access the request URI below."></InputText>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text">URI</span>
        <InputSelect id="version-select" class="form-select" @bind-Value=this.Model.BaseAddress>
            <option value="https://graph.microsoft.com/v1.0">https://graph.microsoft.com/v1.0</option>
            <option value="https://graph.microsoft.com/beta">https://graph.microsoft.com/beta</option>
        </InputSelect>
        <InputText id="request-uri" class="form-control" @bind-Value=this.Model.RequestUri></InputText>
        
        <button type="submit" class="btn btn-primary" @attributes=this.GetButtonAttributes() @onclick="async (e) => { await this.SendRequestAsync(); }">Send</button>
    </div>
</EditForm>

@if(this.ResponseContent?.Length > 0)
{
    <h2>Response</h2>
    <small>Status code: @this.ResponseStatus</small>
    <div class="mt-3">
        <code>@this.ResponseContent</code>
    </div>
    <div class="mt-3">
        <h3>Tokens</h3>
        <ul>
            <li><a href="https://jwt.ms/#access_token=@this.AccessToken" target="_blank">Access Token</a></li>
            <li><a href="https://jwt.ms/#id_token=@this.IdToken" target="_blank">Id Token</a></li>
        </ul>
    </div>
}
else if(null != this.ResponseException)
{
    <h2>Error</h2>
    <small>Status code: @this.ResponseStatus</small>
    <pre class="mt-3">@this.ResponseException.ToString()</pre>
}
